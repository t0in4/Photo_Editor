type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'

    android {
      compileSdkVersion hs.android.compileSdkVersion

      defaultConfig {

        applicationId "org.hyperskill.photoeditor"
        minSdkVersion hs.android.minSdkVersion
        targetSdkVersion hs.android.targetSdkVersion
        versionCode 1
        versionName '1.0'
      }

      buildFeatures {
        viewBinding true
      }
    }

    dependencies {
      def kotlinVersion = hs.android.kotlinVersion
      implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

      def coreKtx = hs.android.lib.coreKtx
      implementation "androidx.core:core-ktx:$coreKtx"

      def appCompat = hs.android.lib.appCompat
      implementation "androidx.appcompat:appcompat:$appCompat"

      def constraintLayout = hs.android.lib.constraintLayout
      implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"

      def material = hs.android.lib.material
      implementation "com.google.android.material:material:$material"
    }
  learner_created: false
- name: src/main/res/layout/activity_main.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".MainActivity">

        <ImageView
            android:id="@+id/ivPhoto"
            android:layout_width="300dp"
            android:layout_height="300dp"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_bias="0.2"/>


    </androidx.constraintlayout.widget.ConstraintLayout>
  learner_created: false
- name: src/main/res/values/colors.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <color name="colorPrimary">#008577</color>
        <color name="colorPrimaryDark">#00574B</color>
        <color name="colorAccent">#D81B60</color>
    </resources>
  learner_created: false
- name: src/main/res/values/styles.xml
  visible: true
  text: |
    <resources>

        <!-- Base application theme. -->
        <style name="AppTheme" parent="Theme.MaterialComponents.Light.DarkActionBar">
            <!-- Customize your theme here. -->
            <item name="colorPrimary">@color/colorPrimary</item>
            <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
            <item name="colorAccent">@color/colorAccent</item>
        </style>

    </resources>
  learner_created: false
- name: src/main/res/values/strings.xml
  visible: true
  text: |
    <resources>
        <string name="app_name">Photo Editor</string>
    </resources>
  learner_created: false
- name: src/main/res/drawable/myexample.jpg
  visible: true
  text: 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
  learner_created: false
- name: src/main/res/drawable/ic_launcher_background.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillColor="#008577"
            android:pathData="M0,0h108v108h-108z" />
        <path
            android:fillColor="#00000000"
            android:pathData="M9,0L9,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,0L19,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,0L29,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,0L39,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,0L49,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,0L59,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,0L69,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,0L79,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M89,0L89,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M99,0L99,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,9L108,9"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,19L108,19"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,29L108,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,39L108,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,49L108,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,59L108,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,69L108,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,79L108,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,89L108,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,99L108,99"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,29L89,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,39L89,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,49L89,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,59L89,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,69L89,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,79L89,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,19L29,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,19L39,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,19L49,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,19L59,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,19L69,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,19L79,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
    </vector>
  learner_created: false
- name: src/main/res/drawable-v24/ic_launcher_foreground.xml
  visible: true
  text: |
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:aapt="http://schemas.android.com/aapt"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillType="evenOdd"
            android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000">
            <aapt:attr name="android:fillColor">
                <gradient
                    android:endX="78.5885"
                    android:endY="90.9159"
                    android:startX="48.7653"
                    android:startY="61.0927"
                    android:type="linear">
                    <item
                        android:color="#44000000"
                        android:offset="0.0" />
                    <item
                        android:color="#00000000"
                        android:offset="1.0" />
                </gradient>
            </aapt:attr>
        </path>
        <path
            android:fillColor="#FFFFFF"
            android:fillType="nonZero"
            android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000" />
    </vector>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/java/org/hyperskill/photoeditor/MainActivity.kt
  visible: true
  text: |-
    package org.hyperskill.photoeditor

    import android.app.Activity
    import android.content.Intent
    import android.graphics.Bitmap
    import android.graphics.Color
    import android.os.Bundle
    import android.provider.MediaStore
    import android.view.View
    import android.widget.ImageView
    import androidx.activity.result.ActivityResult
    import androidx.activity.result.ActivityResultLauncher
    import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
    import androidx.appcompat.app.AppCompatActivity


    class MainActivity : AppCompatActivity() {

        private lateinit var currentImage: ImageView
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
            bindViews()

            //do not change this line
            currentImage.setImageBitmap(createBitmap())
        }

        private fun bindViews() {
            currentImage = findViewById(R.id.ivPhoto)
        }

        // do not change this function
        fun createBitmap(): Bitmap {
            val width = 200
            val height = 100
            val pixels = IntArray(width * height)
            // get pixel array from source

            var R: Int
            var G: Int
            var B: Int
            var index: Int

            for (y in 0 until height) {
                for (x in 0 until width) {
                    // get current index in 2D-matrix
                    index = y * width + x
                    // get color
                    R = x % 100 + 40
                    G = y % 100 + 80
                    B = (x+y) % 100 + 120

                    pixels[index] = Color.rgb(R,G,B)

                }
            }
            // output bitmap
            val bitmapOut = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565)
            bitmapOut.setPixels(pixels, 0, width, 0, 0, width, height)
            return bitmapOut
        }
    }
  learner_created: false
- name: src/main/AndroidManifest.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="org.hyperskill.photoeditor">

        <application
            android:allowBackup="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/app_name"
            android:roundIcon="@mipmap/ic_launcher_round"
            android:supportsRtl="true"
            android:theme="@style/AppTheme">
            <activity android:name=".MainActivity">
                <intent-filter>
                    <action android:name="android.intent.action.MAIN" />

                    <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
            </activity>
        </application>

    </manifest>
  learner_created: false
- name: src/test/java/org/hyperskill/photoeditor/TestUtils.kt
  visible: false
  text: |
    package org.hyperskill.photoeditor

    import android.app.Activity
    import android.content.ContentResolver
    import android.content.Context
    import android.content.Intent
    import android.graphics.Bitmap
    import android.graphics.Color
    import android.net.Uri
    import android.view.View
    import org.junit.Assert
    import kotlin.math.abs

    // version 1.5
    object TestUtils {

        inline fun <reified T> Activity.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", this.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            Assert.assertNotNull(idNotFoundMessage, view)
            Assert.assertTrue(wrongClassMessage, view is T)

            return view as T
        }

        fun assertColorsValues(message: String, expected: Triple<Int, Int, Int>, actual: Triple<Int, Int, Int>, marginError: Int) {
            val messageWrongValuesFormat = "%s expected: <(%d, %d, %d)> actual: <(%d, %d, %d)>"
            val (expectedRed, expectedGreen, expectedBlue) = expected
            val (actualRed, actualGreen, actualBlue) = actual

            val messageWrongValues = messageWrongValuesFormat.format( message,
                expectedRed, expectedGreen, expectedBlue,
                actualRed, actualGreen, actualBlue
            )

            Assert.assertTrue(messageWrongValues, abs(expectedRed - actualRed) <= marginError)
            Assert.assertTrue(messageWrongValues, abs(expectedGreen - actualGreen) <= marginError)
            Assert.assertTrue(messageWrongValues, abs(expectedBlue - actualBlue) <= marginError)
        }

        fun createGalleryPickActivityResultStub(activity: MainActivity): Intent {
            val resultIntent = Intent()
            val uri = getUriToDrawable(activity,R.drawable.myexample)
            resultIntent.data = uri
            return resultIntent
        }

        fun getUriToDrawable(context: Context, drawableId: Int): Uri {
            return Uri.parse(
                ContentResolver.SCHEME_ANDROID_RESOURCE +
                        "://" + context.resources.getResourcePackageName(drawableId)
                        + '/' + context.resources.getResourceTypeName(drawableId)
                        + '/' + context.resources.getResourceEntryName(drawableId)
            )
        }

        fun singleColor(source: Bitmap, x: Int = 70, y: Int = 60): Triple<Int, Int, Int> {
            val pixel = source.getPixel(x, y)

            val red = Color.red(pixel)
            val green = Color.green(pixel)
            val blue = Color.blue(pixel)

            return  Triple(red,green,blue)
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/photoeditor/Stage4UnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.photoeditor

    import android.graphics.drawable.BitmapDrawable
    import android.os.Looper
    import android.widget.Button
    import android.widget.ImageView
    import com.google.android.material.slider.Slider
    import org.hyperskill.photoeditor.TestUtils.assertColorsValues
    import org.hyperskill.photoeditor.TestUtils.findViewByString
    import org.hyperskill.photoeditor.TestUtils.singleColor
    import org.junit.Assert.assertEquals
    import org.junit.Assert.assertTrue
    import org.junit.Test
    import org.junit.runner.RunWith
    import org.robolectric.Robolectric
    import org.robolectric.RobolectricTestRunner
    import org.robolectric.Shadows
    import org.robolectric.shadows.ShadowActivity
    import org.robolectric.shadows.ShadowLooper

    // version 1.5
    @RunWith(RobolectricTestRunner::class)
    class Stage4UnitTest {

        private val messageNullAfterFilters = "Image was null after filters been applied"
        private val messageWrongValues = "Wrong values after filters been applied."
        private val marginError = 3

        private val activityController = Robolectric.buildActivity(MainActivity::class.java)
        private val activity = activityController.setup().get()
        private val shadowActivity: ShadowActivity by lazy { Shadows.shadowOf(activity) }
        private val shadowLooper: ShadowLooper by lazy { Shadows.shadowOf(Looper.getMainLooper()) }

        private val ivPhoto by lazy { activity.findViewByString<ImageView>("ivPhoto")
            .also(this::testShouldCheckImageIsSetToDefaultBitmap)
        }
        private val btnGallery by lazy { activity.findViewByString<Button>("btnGallery")
            .also { testShouldCheckButton(it, "GALLERY", "btnGallery") }
        }
        private val btnSave by lazy { activity.findViewByString<Button>("btnSave")
            .also { testShouldCheckButton(it, "SAVE", "btnSave") }
        }
        private val slBrightness by lazy { activity.findViewByString<Slider>("slBrightness")
            .also { testShouldCheckSlider(it, "slBrightness") }
        }
        private val slContrast by lazy { activity.findViewByString<Slider>("slContrast")
            .also { testShouldCheckSlider(it, "slContrast") }
        }


        private fun testShouldCheckImageIsSetToDefaultBitmap(ivPhoto: ImageView) {
            val messageInitialImageNull = "Initial image was null, it should be set with ___.setImageBitmap(createBitmap())"
            val messageWrongInitialImage = "Is defaultBitmap set correctly? It should be set with ___.setImageBitmap(createBitmap())"
            val actualBitmap = (ivPhoto.drawable as BitmapDrawable?)?.bitmap ?: throw AssertionError(
                messageInitialImageNull
            )
            assertTrue(messageWrongInitialImage, 200 == actualBitmap.width)
            assertTrue(messageWrongInitialImage, 100 == actualBitmap.height)
            val expectedRgb = Triple(110, 140, 150)
            assertTrue(messageWrongInitialImage, expectedRgb == singleColor(actualBitmap))
        }

        private fun testShouldCheckButton(btn: Button, expectedInitialText: String, btnName: String) {
            assertEquals("Wrong text for $btnName",
                expectedInitialText.uppercase(), btn.text.toString().uppercase()
            )
        }

        private fun testShouldCheckSlider(
            slBrightness: Slider, sliderName: String, expectedStepSize: Float = 10f ,
            expectedValueFrom: Float = -250f, expectedValueTo: Float = 250f, expectedValue: Float = 0f) {

            val message1 = "\"$sliderName\" should have proper stepSize attribute"
            assertEquals(message1, expectedStepSize, slBrightness.stepSize)

            val message2 = "\"$sliderName\" should have proper valueFrom attribute"
            assertEquals(message2, expectedValueFrom, slBrightness.valueFrom)

            val message3 = "\"$sliderName\" should have proper valueTo attribute"
            assertEquals(message3, expectedValueTo, slBrightness.valueTo)

            val message4 = "\"$sliderName\" should have proper initial value"
            assertEquals(message4, expectedValue, slBrightness.value)
        }

        @Test
        fun testShouldCheckImageView() {
            ivPhoto // initializes variable and perform initialization assertions
        }

        @Test
        fun testShouldCheckSliderBrightness() {
            slBrightness // initializes variable and perform initialization assertions
        }

        @Test
        fun testShouldCheckSliderContrast() {
            slContrast // initializes variable and perform initialization assertions
        }

        @Test
        fun testShouldCheckButtonGallery() {
            btnGallery // initializes variable and perform initialization assertions
        }

        @Test
        fun testShouldCheckButtonSave() {
            btnSave  // initializes variable and perform initialization assertions
        }


        @Test
        fun testShouldCheckSliderContrastNotCrashingByDefault() {
            ivPhoto
            slContrast.value += slContrast.stepSize
            slContrast.value -= slContrast.stepSize
            shadowLooper.runToEndOfTasks()
            (ivPhoto.drawable as BitmapDrawable?)?.bitmap ?: AssertionError(messageNullAfterFilters)
        }

        @Test
        fun testShouldCheckDefaultBitmapEdit() {
            slBrightness
            slContrast
            ivPhoto

            val expected = Triple(141, 210, 255)

            slBrightness.value += slBrightness.stepSize
            slContrast.value += slContrast.stepSize * 9
            slContrast.value += slContrast.stepSize

            shadowLooper.runToEndOfTasks()
            Thread.sleep(200)
            shadowLooper.runToEndOfTasks()

            val actualImage = (ivPhoto.drawable as BitmapDrawable?)?.bitmap ?: throw AssertionError(messageNullAfterFilters)
            val actual = singleColor(actualImage, 90, 80)
            assertColorsValues("$messageWrongValues For x=90, y=80", expected, actual, marginError)
        }

        @Test
        fun testShouldCheckDefaultBitmapEdit2() {
            slBrightness
            slContrast
            ivPhoto
            val expected = Triple(149, 177, 205)

            slBrightness.value += slBrightness.stepSize
            slBrightness.value += slBrightness.stepSize
            slContrast.value -= slContrast.stepSize

            shadowLooper.runToEndOfTasks()
            Thread.sleep(200)
            shadowLooper.runToEndOfTasks()

            val actualImage = (ivPhoto.drawable as BitmapDrawable?)?.bitmap ?: throw AssertionError(messageNullAfterFilters)
            val actual = singleColor(actualImage, 90, 80)
            assertColorsValues("$messageWrongValues For x=90, y=80", expected, actual, marginError)
        }

        @Test
        fun testShouldCheckDefaultBitmapEditWiderSample() {
            slBrightness
            slContrast
            ivPhoto

            val sample = listOf(
                10 to 40,
                30 to 99,
                150 to 32,
                99 to 20,
                10 to 50,
                190 to 0,
                5 to 60,
                70 to 90,
                0 to 0,
                30 to 80
            )
            val expected = listOf(
                Triple(0, 118, 232),
                Triple(3, 253, 184),
                Triple(49, 100, 255),
                Triple(161, 72, 161),
                Triple(0, 141, 255),
                Triple(141, 26, 255),
                Triple(0, 164, 255),
                Triple(95, 232, 255),
                Triple(0, 26, 118),
                Triple(3, 210, 141),
            )

            slBrightness.value += slBrightness.stepSize
            slContrast.value += slContrast.stepSize * 9
            slContrast.value += slContrast.stepSize

            shadowLooper.runToEndOfTasks()
            Thread.sleep(200)
            shadowLooper.runToEndOfTasks()

            val actualImage = (ivPhoto.drawable as BitmapDrawable?)?.bitmap ?: throw AssertionError(messageNullAfterFilters)

            for(i in sample.indices) {
                val point = sample[i]
                val actual = singleColor(actualImage, point.first, point.second)
                assertColorsValues("$messageWrongValues For x=${point.first}, y=${point.second}",
                    expected[i], actual, marginError
                )
            }
        }

        @Test
        fun testOrderOfSlidersEventsShouldNotMatter() {
            slBrightness
            slContrast
            ivPhoto
            val expected = Triple(141, 210, 255)
            val wrongExpected = Triple(140, 170, 200)  //happens if brightness slider ignores contrast value

            slContrast.value += slContrast.stepSize * 9
            slContrast.value += slContrast.stepSize
            slBrightness.value += slBrightness.stepSize

            shadowLooper.runToEndOfTasks()
            Thread.sleep(200)
            shadowLooper.runToEndOfTasks()

            val actualImage = (ivPhoto.drawable as BitmapDrawable?)?.bitmap ?: throw AssertionError(messageNullAfterFilters)
            val actual = singleColor(actualImage, 90, 80)
            val messageWrongOrder =
                if(actual == wrongExpected) " Order of slider events should not matter."
                else ""
            assertColorsValues("$messageWrongValues $messageWrongOrder For x=90, y=80", expected, actual, marginError)
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/18743#comment
status: Unchecked
record: -1
